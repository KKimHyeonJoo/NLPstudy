{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Y09Wknbf18e6x0QE8F9kJ8yzmT7QRurg","timestamp":1746247024830}],"authorship_tag":"ABX9TyNUTlEow6wq7qrPgIQfScm8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nNBpa59_StrZ","executionInfo":{"status":"ok","timestamp":1746250605287,"user_tz":-540,"elapsed":38998,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}},"outputId":"fc3295bc-9597-4fa4-9df8-633442bc494a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: langchain-community in /usr/local/lib/python3.11/dist-packages (0.3.23)\n","Requirement already satisfied: langchain-core<1.0.0,>=0.3.56 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (0.3.58)\n","Requirement already satisfied: langchain<1.0.0,>=0.3.24 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (0.3.25)\n","Requirement already satisfied: SQLAlchemy<3,>=1.4 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (2.0.40)\n","Requirement already satisfied: requests<3,>=2 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (2.32.3)\n","Requirement already satisfied: PyYAML>=5.3 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (6.0.2)\n","Requirement already satisfied: aiohttp<4.0.0,>=3.8.3 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (3.11.15)\n","Requirement already satisfied: tenacity!=8.4.0,<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (9.1.2)\n","Requirement already satisfied: dataclasses-json<0.7,>=0.5.7 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (0.6.7)\n","Requirement already satisfied: pydantic-settings<3.0.0,>=2.4.0 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (2.9.1)\n","Requirement already satisfied: langsmith<0.4,>=0.1.125 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (0.3.38)\n","Requirement already satisfied: httpx-sse<1.0.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (0.4.0)\n","Requirement already satisfied: numpy>=1.26.2 in /usr/local/lib/python3.11/dist-packages (from langchain-community) (2.0.2)\n","Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (2.6.1)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (1.3.2)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (25.3.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (1.6.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (6.4.3)\n","Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (0.3.1)\n","Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain-community) (1.20.0)\n","Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.11/dist-packages (from dataclasses-json<0.7,>=0.5.7->langchain-community) (3.26.1)\n","Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from dataclasses-json<0.7,>=0.5.7->langchain-community) (0.9.0)\n","Requirement already satisfied: langchain-text-splitters<1.0.0,>=0.3.8 in /usr/local/lib/python3.11/dist-packages (from langchain<1.0.0,>=0.3.24->langchain-community) (0.3.8)\n","Requirement already satisfied: pydantic<3.0.0,>=2.7.4 in /usr/local/lib/python3.11/dist-packages (from langchain<1.0.0,>=0.3.24->langchain-community) (2.11.3)\n","Requirement already satisfied: jsonpatch<2.0,>=1.33 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.56->langchain-community) (1.33)\n","Requirement already satisfied: packaging<25,>=23.2 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.56->langchain-community) (24.2)\n","Requirement already satisfied: typing-extensions>=4.7 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.56->langchain-community) (4.13.2)\n","Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-community) (0.28.1)\n","Requirement already satisfied: orjson<4.0.0,>=3.9.14 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-community) (3.10.17)\n","Requirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-community) (1.0.0)\n","Requirement already satisfied: zstandard<0.24.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-community) (0.23.0)\n","Requirement already satisfied: python-dotenv>=0.21.0 in /usr/local/lib/python3.11/dist-packages (from pydantic-settings<3.0.0,>=2.4.0->langchain-community) (1.1.0)\n","Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic-settings<3.0.0,>=2.4.0->langchain-community) (0.4.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain-community) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain-community) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain-community) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain-community) (2025.4.26)\n","Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.11/dist-packages (from SQLAlchemy<3,>=1.4->langchain-community) (3.2.1)\n","Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->langsmith<0.4,>=0.1.125->langchain-community) (4.9.0)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->langsmith<0.4,>=0.1.125->langchain-community) (1.0.9)\n","Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->langsmith<0.4,>=0.1.125->langchain-community) (0.16.0)\n","Requirement already satisfied: jsonpointer>=1.9 in /usr/local/lib/python3.11/dist-packages (from jsonpatch<2.0,>=1.33->langchain-core<1.0.0,>=0.3.56->langchain-community) (3.0.0)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain<1.0.0,>=0.3.24->langchain-community) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.33.1 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain<1.0.0,>=0.3.24->langchain-community) (2.33.1)\n","Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json<0.7,>=0.5.7->langchain-community) (1.1.0)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio->httpx<1,>=0.23.0->langsmith<0.4,>=0.1.125->langchain-community) (1.3.1)\n","Requirement already satisfied: langchain-openai in /usr/local/lib/python3.11/dist-packages (0.3.16)\n","Requirement already satisfied: langchain-core<1.0.0,>=0.3.58 in /usr/local/lib/python3.11/dist-packages (from langchain-openai) (0.3.58)\n","Requirement already satisfied: openai<2.0.0,>=1.68.2 in /usr/local/lib/python3.11/dist-packages (from langchain-openai) (1.76.0)\n","Requirement already satisfied: tiktoken<1,>=0.7 in /usr/local/lib/python3.11/dist-packages (from langchain-openai) (0.9.0)\n","Requirement already satisfied: langsmith<0.4,>=0.1.125 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.58->langchain-openai) (0.3.38)\n","Requirement already satisfied: tenacity!=8.4.0,<10.0.0,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.58->langchain-openai) (9.1.2)\n","Requirement already satisfied: jsonpatch<2.0,>=1.33 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.58->langchain-openai) (1.33)\n","Requirement already satisfied: PyYAML>=5.3 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.58->langchain-openai) (6.0.2)\n","Requirement already satisfied: packaging<25,>=23.2 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.58->langchain-openai) (24.2)\n","Requirement already satisfied: typing-extensions>=4.7 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.58->langchain-openai) (4.13.2)\n","Requirement already satisfied: pydantic<3.0.0,>=2.5.2 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.58->langchain-openai) (2.11.3)\n","Requirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (4.9.0)\n","Requirement already satisfied: distro<2,>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (1.9.0)\n","Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (0.28.1)\n","Requirement already satisfied: jiter<1,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (0.9.0)\n","Requirement already satisfied: sniffio in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (1.3.1)\n","Requirement already satisfied: tqdm>4 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (4.67.1)\n","Requirement already satisfied: regex>=2022.1.18 in /usr/local/lib/python3.11/dist-packages (from tiktoken<1,>=0.7->langchain-openai) (2024.11.6)\n","Requirement already satisfied: requests>=2.26.0 in /usr/local/lib/python3.11/dist-packages (from tiktoken<1,>=0.7->langchain-openai) (2.32.3)\n","Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<5,>=3.5.0->openai<2.0.0,>=1.68.2->langchain-openai) (3.10)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->openai<2.0.0,>=1.68.2->langchain-openai) (2025.4.26)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->openai<2.0.0,>=1.68.2->langchain-openai) (1.0.9)\n","Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai<2.0.0,>=1.68.2->langchain-openai) (0.16.0)\n","Requirement already satisfied: jsonpointer>=1.9 in /usr/local/lib/python3.11/dist-packages (from jsonpatch<2.0,>=1.33->langchain-core<1.0.0,>=0.3.58->langchain-openai) (3.0.0)\n","Requirement already satisfied: orjson<4.0.0,>=3.9.14 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-core<1.0.0,>=0.3.58->langchain-openai) (3.10.17)\n","Requirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-core<1.0.0,>=0.3.58->langchain-openai) (1.0.0)\n","Requirement already satisfied: zstandard<0.24.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-core<1.0.0,>=0.3.58->langchain-openai) (0.23.0)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.5.2->langchain-core<1.0.0,>=0.3.58->langchain-openai) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.33.1 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.5.2->langchain-core<1.0.0,>=0.3.58->langchain-openai) (2.33.1)\n","Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.5.2->langchain-core<1.0.0,>=0.3.58->langchain-openai) (0.4.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.26.0->tiktoken<1,>=0.7->langchain-openai) (3.4.1)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.26.0->tiktoken<1,>=0.7->langchain-openai) (2.4.0)\n","Requirement already satisfied: pymupdf in /usr/local/lib/python3.11/dist-packages (1.25.5)\n","Requirement already satisfied: faiss-cpu in /usr/local/lib/python3.11/dist-packages (1.11.0)\n","Requirement already satisfied: numpy<3.0,>=1.25.0 in /usr/local/lib/python3.11/dist-packages (from faiss-cpu) (2.0.2)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from faiss-cpu) (24.2)\n"]}],"source":["!pip install -U langchain-community\n","!pip install -U langchain-openai\n","!pip install pymupdf\n","!pip install faiss-cpu\n","!pip install -qU langchain umap-learn scikit-learn langchain_community tiktoken langchain-openai langchainhub chromadb langchain-anthropic"]},{"cell_type":"code","source":["import os\n","\n","# os.environ[\"OPENAI_API_KEY\"] = \"여기에 발급받은 api key 붙여넣기\"\n","os.environ[\"OPENAI_API_KEY\"] = \"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\""],"metadata":{"id":"Qb8gtrfnS_OI","executionInfo":{"status":"ok","timestamp":1746250605330,"user_tz":-540,"elapsed":40,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["## 1. 문서"],"metadata":{"id":"21ow6R5heoeT"}},{"cell_type":"code","source":["from langchain_community.document_loaders.recursive_url_loader import RecursiveUrlLoader\n","from bs4 import BeautifulSoup as Soup\n","import tiktoken\n","import matplotlib.pyplot as plt\n","\n","\n","def num_tokens_from_string(string: str, encoding_name: str) -> int:\n","    # 주어진 문자열에서 토큰의 개수를 반환\n","    encoding = tiktoken.get_encoding(encoding_name)\n","    num_tokens = len(encoding.encode(string))\n","    return num_tokens\n","\n","\n","# RecursiveUrlLoader를 이용해 문서 로드\n","url = \"https://python.langchain.com/docs/expression_language/\"\n","loader = RecursiveUrlLoader(\n","    url=url, max_depth=20, extractor=lambda x: Soup(x, \"html.parser\").text\n",")\n","docs = loader.load()\n","\n","# PydanticOutputParser를 사용하여 문서 로드 (기본 LCEL 문서 외부)\n","url = \"https://python.langchain.com/docs/modules/model_io/output_parsers/quick_start\"\n","loader = RecursiveUrlLoader(\n","    url=url, max_depth=1, extractor=lambda x: Soup(x, \"html.parser\").text\n",")\n","docs_pydantic = loader.load()\n","\n","# Self Query를 사용하여 문서 로드 (기본 LCEL 문서 외부)\n","url = \"https://python.langchain.com/docs/modules/data_connection/retrievers/self_query/\"\n","loader = RecursiveUrlLoader(\n","    url=url, max_depth=1, extractor=lambda x: Soup(x, \"html.parser\").text\n",")\n","docs_sq = loader.load()\n","\n","# 문서 텍스트\n","docs.extend([*docs_pydantic, *docs_sq])\n","docs_texts = [d.page_content for d in docs]\n","\n","# 각 문서에 대한 토큰 수 계산\n","counts = [num_tokens_from_string(d, \"cl100k_base\") for d in docs_texts]\n","\n","# 토큰 수의 히스토그램을 그립니다.\n","plt.figure(figsize=(10, 6))\n","plt.hist(counts, bins=30, color=\"blue\", edgecolor=\"black\", alpha=0.7)\n","plt.title(\"Token Counts in LCEL Documents\")\n","plt.xlabel(\"Token Count\")\n","plt.ylabel(\"Frequency\")\n","plt.grid(axis=\"y\", alpha=0.75)\n","\n","# 히스토그램을 표시합니다.\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":734},"id":"38tVT8-Xen5F","executionInfo":{"status":"ok","timestamp":1746250607638,"user_tz":-540,"elapsed":2309,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}},"outputId":"693412a4-8076-4e57-d384-01f6f3add8a3"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.11/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 569);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":3},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA1cAAAIjCAYAAADvBuGTAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAVQlJREFUeJzt3XlclWX+//H3gSOrAq4sueGeK6lJlE6aJC5jmi1qi2iO/cbR0sE2mlKpvtGmaaOjNaVkU+nYok2LSyaVRRommZamhjIpoGaIoIKHc/3+8MGZTqAC3nhEXs/H4zzG+7qv+zqfi5tD5z33fa5jM8YYAQAAAADOi5enCwAAAACASwHhCgAAAAAsQLgCAAAAAAsQrgAAAADAAoQrAAAAALAA4QoAAAAALEC4AgAAAAALEK4AAAAAwAKEKwAAAACwAOEKAM6TzWbT5MmTPV1GrTd27Fi1bNnS02UAAGoxwhWAWslms1XokZqa6ulSq+Tdd9/VoEGD1KhRI/n4+CgiIkK33nqrPvnkE0+XJkk6cOCAZs6cqYyMDE+Xckapqamy2Wx66623ztn35MmTev755xUdHa3g4GD5+fmpXbt2mjx5sn788UdXv5kzZ5719y0nJ0eStHfvXtlsNj333HOVrnvs2LFuY9atW1etWrXSzTffrLfffltOp7PSY9YWx48f18yZM2vs6x6A59k9XQAAeMJrr73mtr1kyRKtXbu2TPvll19+Ics6b8YY3XXXXUpJSdEVV1yhhIQEhYWFKTs7W++++6769++vL774QldffbVH6zxw4ICSkpLUsmVLRUVFWTLmP//5T48Eh8OHD2vgwIHavHmz/vjHP+q2225T3bp1tXPnTi1dulQvvfSSiouL3Y5ZsGCB6tatW2askJAQS2ry9fXVyy+/LEk6ceKE9u3bp//85z+6+eab1bdvX61cuVJBQUGWPNel5Pjx40pKSpIk9e3b17PFAKiRCFcAaqU77rjDbfurr77S2rVry7TXNLNmzVJKSoqmTp2q2bNny2azufb97W9/02uvvSa7/dL801+nTh2PPO/YsWO1ZcsWvfXWW7rpppvc9j3++OP629/+VuaYm2++WY0aNaq2mux2e5nf5SeeeEJPPfWUEhMTNWHCBC1btqzanh8AaituCwSAMygsLNS0adPUrFkz+fr6qn379nruuedkjDnnsU888YS8vLz097//3dX20UcfqU+fPgoMDFS9evU0ZMgQbd++3e24sWPHqm7dutq/f7+GDx+uunXrqnHjxrrvvvtUUlJy1uc8ceKEkpOT1aFDBz333HNuwarUnXfeqV69erm2f/rpJ91yyy1q0KCBAgICdNVVV+mDDz5wOyYlJUU2m0179+51ay+9be63t1D17dtXnTt31vfff69+/fopICBAl112mZ555hm346688kpJ0rhx41y3r6WkpEiSdu3apZtuuklhYWHy8/NT06ZNNWrUKB09evSs8//9Z65+e2vdSy+9pNatW8vX11dXXnmlvv7667OOVVEbN27UBx98oPHjx5cJVtLpK0hVubWvujz00EMaMGCAli9f7na7oiT94x//UKdOneTr66uIiAhNmjRJeXl5ZcbYuHGjBg8erPr16yswMFBdu3bV3LlzXfv79u1b7lWfs52f+fPnq1WrVgoICNCAAQP03//+V8YYPf7442ratKn8/f01bNgwHTlypMy4Vr2u9u7dq8aNG0uSkpKSXL+XM2fOlCTl5ORo3Lhxatq0qXx9fRUeHq5hw4aVeV0AqN0uzf/7EgDOkzFGN9xwg9avX6/x48crKipKq1ev1v3336/9+/fr+eefP+OxjzzyiJ588km9+OKLmjBhgqTTtyHGx8crLi5OTz/9tI4fP64FCxaod+/e2rJli9ubzpKSEsXFxSk6OlrPPfecPv74Y82aNUutW7fWxIkTz/i8GzZs0JEjRzR16lR5e3ufc465ubm6+uqrdfz4cd17771q2LChXn31Vd1www166623dOONN1b8B/Ybv/76qwYOHKgRI0bo1ltv1VtvvaUHH3xQXbp00aBBg3T55Zfrscce0/Tp03X33XerT58+kqSrr75axcXFiouLU1FRke655x6FhYVp//79ev/995WXl6fg4OBK1/PGG2/o2LFj+n//7//JZrPpmWee0YgRI/TTTz+d99Wu9957T9Lp0FoZ5YUEu91u2W2BZ3PnnXdqzZo1Wrt2rdq1ayfp9GfBkpKSFBsbq4kTJ2rnzp1asGCBvv76a33xxReun9PatWv1xz/+UeHh4ZoyZYrCwsL0ww8/6P3339eUKVOqVM/rr7+u4uJi3XPPPTpy5IieeeYZ3XrrrbruuuuUmpqqBx98ULt379bf//533XfffVq0aJHrWCtfV40bN9aC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V7v2OxwO07lzZxMbG2u2bNliPvzwQ9OoUSOTmJjoielc0j788EPzt7/9zbzzzjtGknn33Xfd9j/11FMmODjYrFixwnz77bfmhhtuMJGRkebEiROuPgMHDjTdunUzX331lfn8889NmzZtzOjRo137jx49akJDQ83tt99utm3bZt58803j7+9vXnzxxQs1zUvSuc5dfHy8GThwoNvr8MiRI259OHeeERcXZxYvXmy2bdtmMjIyzODBg03z5s1NQUGBq48Vfyd/+uknExAQYBISEsz3339v/v73vxtvb2+zatWqCzrfS0lFzt21115rJkyY4PbaO3r0qGs/584z3nvvPfPBBx+YH3/80ezcudM8/PDDpk6dOmbbtm3GGF5ztRnh6nd69eplJk2a5NouKSkxERERJjk52YNV1W4zZsww3bp1K3dfXl6eqVOnjlm+fLmr7YcffjCSTFpamjHm9JtGLy8vk5OT4+qzYMECExQUZIqKiqq19trs92/QnU6nCQsLM88++6yrLS8vz/j6+po333zTGGPM999/bySZr7/+2tXno48+Mjabzezfv98YY8w//vEPU79+fbdz9+CDD5r27dtX84xqjzOFq2HDhp3xGM7dxePgwYNGkvn000+NMdb9nXzggQdMp06d3J5r5MiRJi4urrqnVGv8/twZczpcTZky5YzHcO4uHvXr1zcvv/wyr7lajtsCf6O4uFibN29WbGysq83Ly0uxsbFKS0vzYGXYtWuXIiIi1KpVK91+++3KysqSJG3evFmnTp1yO2cdOnRQ8+bNXecsLS1NXbp0cX0xtSTFxcUpPz9f27dvv7ATqcUyMzOVk5Pjdq6Cg4MVHR3tdq5CQkLUs2dPV5/Y2Fh5eXlp48aNrj5/+MMf5OPj4+oTFxennTt36tdff71As6mdUlNT1aRJE7Vv314TJ07UL7/84trHubt4HD16VJLUoEEDSdb9nUxLS3Mbo7QP/320zu/PXanXX39djRo1UufOnZWYmKjjx4+79nHuPK+kpERLly5VYWGhYmJieM3VcnZPF3AxOXz4sEpKStx+0SUpNDRUO3bs8FBViI6OVkpKitq3b6/s7GwlJSWpT58+2rZtm3JycuTj46OQkBC3Y0JDQ5WTkyNJysnJKfeclu7DhVH6sy7vXPz2XDVp0sRtv91uV4MGDdz6REZGlhmjdF/9+vWrpf7abuDAgRoxYoQiIyO1Z88ePfzwwxo0aJDS0tLk7e3NubtIOJ1OTZ06Vddcc406d+4sSZb9nTxTn/z8fJ04cUL+/v7VMaVao7xzJ0m33XabWrRooYiICG3dulUPPvigdu7cqXfeeUcS586TvvvuO8XExOjkyZOqW7eu3n33XXXs2FEZGRm85moxwhUueoMGDXL9u2vXroqOjlaLFi3073//mz8swAUyatQo17+7dOmirl27qnXr1kpNTVX//v09WBl+a9KkSdq2bZs2bNjg6VJQSWc6d3fffbfr3126dFF4eLj69++vPXv2qHXr1he6TPxG+/btlZGRoaNHj+qtt95SfHy8Pv30U0+XBQ/jtsDfaNSokby9vcus5pKbm6uwsDAPVYXfCwkJUbt27bR7926FhYWpuLhYeXl5bn1+e87CwsLKPael+3BhlP6sz/b6CgsL08GDB932OxwOHTlyhPN5kWnVqpUaNWqk3bt3S+LcXQwmT56s999/X+vXr1fTpk1d7Vb9nTxTn6CgIP6PrvN0pnNXnujoaElye+1x7jzDx8dHbdq0UY8ePZScnKxu3bpp7ty5vOZqOcLVb/j4+KhHjx5at26dq83pdGrdunWKiYnxYGX4rYKCAu3Zs0fh4eHq0aOH6tSp43bOdu7cqaysLNc5i4mJ0Xfffef2xm/t2rUKCgpSx44dL3j9tVVkZKTCwsLczlV+fr42btzodq7y8vK0efNmV59PPvlETqfT9YYiJiZGn332mU6dOuXqs3btWrVv357byi6gn3/+Wb/88ovCw8Mlce48yRijyZMn691339Unn3xS5tZLq/5OxsTEuI1R2of/Plbduc5deTIyMiTJ7bXHubs4OJ1OFRUV8Zqr7Ty9osbFZunSpcbX19ekpKSY77//3tx9990mJCTEbTUXXFjTpk0zqampJjMz03zxxRcmNjbWNGrUyBw8eNAYc3q50+bNm5tPPvnEpKenm5iYGBMTE+M6vnS50wEDBpiMjAyzatUq07hxY5ZirwbHjh0zW7ZsMVu2bDGSzOzZs82WLVvMvn37jDGnl2IPCQkxK1euNFu3bjXDhg0rdyn2K664wmzcuNFs2LDBtG3b1m0577y8PBMaGmruvPNOs23bNrN06VITEBDAct7n6Wzn7tixY+a+++4zaWlpJjMz03z88ceme/fupm3btubkyZOuMTh3njFx4kQTHBxsUlNT3ZbrPn78uKuPFX8nS5eFvv/++80PP/xg5s+fz7LQ5+lc52737t3mscceM+np6SYzM9OsXLnStGrVyvzhD39wjcG584yHHnrIfPrppyYzM9Ns3brVPPTQQ8Zms5k1a9YYY3jN1WaEq3L8/e9/N82bNzc+Pj6mV69e5quvvvJ0SbXayJEjTXh4uPHx8TGXXXaZGTlypNm9e7dr/4kTJ8xf/vIXU79+fRMQEGBuvPFGk52d7TbG3r17zaBBg4y/v79p1KiRmTZtmjl16tSFnsolb/369UZSmUd8fLwx5vRy7I8++qgJDQ01vr6+pn///mbnzp1uY/zyyy9m9OjRpm7duiYoKMiMGzfOHDt2zK3Pt99+a3r37m18fX3NZZddZp566qkLNcVL1tnO3fHjx82AAQNM48aNTZ06dUyLFi3MhAkTyvyfTpw7zyjvvEkyixcvdvWx6u/k+vXrTVRUlPHx8TGtWrVyew5U3rnOXVZWlvnDH/5gGjRoYHx9fU2bNm3M/fff7/Y9V8Zw7jzhrrvuMi1atDA+Pj6mcePGpn///q5gZQyvudrMZowxF+46GQAAAABcmvjMFQAAAABYgHAFAAAAABYgXAEAAACABQhXAAAAAGABwhUAAAAAWIBwBQAAAAAWIFwBAAAAgAUIVwAAAABgAcIVAKBG2bt3r2w2mzIyMjxdCgAAbghXAIALzmaznfUxc+ZMT5dYrt27d2vcuHFq2rSpfH19FRkZqdGjRys9Pf2C1kHABICLk93TBQAAap/s7GzXv5ctW6bp06dr586drra6det6oqyzSk9PV//+/dW5c2e9+OKL6tChg44dO6aVK1dq2rRp+vTTTz1dIgDAw7hyBQC44MLCwlyP4OBg2Ww213aTJk00e/Zs19WhqKgorVq16oxjlZSU6K677lKHDh2UlZUlSVq5cqW6d+8uPz8/tWrVSklJSXI4HK5jbDabXn75Zd14440KCAhQ27Zt9d57753xOYwxGjt2rNq2bavPP/9cQ4YMUevWrRUVFaUZM2Zo5cqVrr7fffedrrvuOvn7+6thw4a6++67VVBQ4Nrft29fTZ061W384cOHa+zYsa7tli1b6sknn9Rdd92levXqqXnz5nrppZdc+yMjIyVJV1xxhWw2m/r27XvWnzcA4MIgXAEALipz587VrFmz9Nxzz2nr1q2Ki4vTDTfcoF27dpXpW1RUpFtuuUUZGRn6/PPP1bx5c33++ecaM2aMpkyZou+//14vvviiUlJS9H//939uxyYlJenWW2/V1q1bNXjwYN1+++06cuRIuTVlZGRo+/btmjZtmry8yv6nMyQkRJJUWFiouLg41a9fX19//bWWL1+ujz/+WJMnT670z2HWrFnq2bOntmzZor/85S+aOHGi6+repk2bJEkff/yxsrOz9c4771R6fACA9QhXAICLynPPPacHH3xQo0aNUvv27fX0008rKipKc+bMcetXUFCgIUOG6NChQ1q/fr0aN24s6XRoeuihhxQfH69WrVrp+uuv1+OPP64XX3zR7fixY8dq9OjRatOmjZ588kkVFBS4QsvvlQa7Dh06nLX2N954QydPntSSJUvUuXNnXXfddZo3b55ee+015ebmVurnMHjwYP3lL39RmzZt9OCDD6pRo0Zav369JLnm2rBhQ4WFhalBgwaVGhsAUD34zBUA4KKRn5+vAwcO6JprrnFrv+aaa/Ttt9+6tY0ePVpNmzbVJ598In9/f1f7t99+qy+++MLtSlVJSYlOnjyp48ePKyAgQJLUtWtX1/7AwEAFBQXp4MGD5dZljKlQ/T/88IO6deumwMBAt9qdTqd27typ0NDQCo3z+/pKb5s8U30AgIsDV64AADXS4MGDtXXrVqWlpbm1FxQUKCkpSRkZGa7Hd999p127dsnPz8/Vr06dOm7H2Ww2OZ3Ocp+rXbt2kqQdO3acd91eXl5lwtqpU6fK9KtMfQCAiwPhCgBw0QgKClJERIS++OILt/YvvvhCHTt2dGubOHGinnrqKd1www1uK/V1795dO3fuVJs2bco8yvu8VEVERUWpY8eOmjVrVrkBJy8vT5J0+eWX69tvv1VhYaFb7V5eXmrfvr2k07f0/Xa1xJKSEm3btq1S9fj4+LiOBQBcPAhXAICLyv3336+nn35ay5Yt086dO/XQQw8pIyNDU6ZMKdP3nnvu0RNPPKE//vGP2rBhgyRp+vTpWrJkiZKSkrR9+3b98MMPWrp0qR555JEq12Sz2bR48WL9+OOP6tOnjz788EP99NNP2rp1q/7v//5Pw4YNkyTdfvvt8vPzU3x8vLZt26b169frnnvu0Z133um6JfC6667TBx98oA8++EA7duzQxIkTXeGsopo0aSJ/f3+tWrVKubm5Onr0aJXnBgCwDuEKAHBRuffee5WQkKBp06apS5cuWrVqld577z21bdu23P5Tp05VUlKSBg8erC+//FJxcXF6//33tWbNGl155ZW66qqr9Pzzz6tFixbnVVevXr2Unp6uNm3aaMKECbr88st1ww03aPv27a7FNgICArR69WodOXJEV155pW6++Wb1799f8+bNc41z1113KT4+XmPGjNG1116rVq1aqV+/fpWqxW6364UXXtCLL76oiIgIV7gDAHiWzVT0U7oAAAAAgDPiyhUAAAAAWIBwBQAAAAAWIFwBAAAAgAUIVwAAAABgAcIVAAAAAFiAcAUAAAAAFiBcAQAAAIAFCFcAAAAAYAHCFQAAAABYgHAFAAAAABYgXAEAAACABf4/VV50Q8AtdCYAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","source":["# 문서 텍스트를 연결\n","# 문서를 출처 메타데이터 기준으로 정렬\n","d_sorted = sorted(docs, key=lambda x: x.metadata[\"source\"])\n","d_reversed = list(reversed(d_sorted))  # 정렬된 문서를 역순으로 배열\n","concatenated_content = \"\\n\\n\\n --- \\n\\n\\n\".join(\n","    [\n","        # 역순으로 배열된 문서의 내용을 연결\n","        doc.page_content\n","        for doc in d_reversed\n","    ]\n",")\n","print(\n","    \"Num tokens in all context: %s\"  # 모든 문맥에서의 토큰 수를 출력\n","    % num_tokens_from_string(concatenated_content, \"cl100k_base\")\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WoLVtjJoe3ZT","executionInfo":{"status":"ok","timestamp":1746250607649,"user_tz":-540,"elapsed":9,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}},"outputId":"8a389825-ddec-497f-8029-91570bdb572d"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Num tokens in all context: 3649\n"]}]},{"cell_type":"markdown","source":["## 2. 모델"],"metadata":{"id":"ffEWmOpzf8lN"}},{"cell_type":"code","source":["from dotenv import load_dotenv\n","\n","load_dotenv()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6jO-VqZ5fXsM","executionInfo":{"status":"ok","timestamp":1746250607655,"user_tz":-540,"elapsed":5,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}},"outputId":"f2bb1d0a-102d-4906-b738-767ecc641543"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["from langchain_openai import OpenAIEmbeddings\n","from langchain.embeddings import CacheBackedEmbeddings\n","from langchain.storage import LocalFileStore\n","\n","store = LocalFileStore(\"./cache/\")\n","\n","# embeddings 인스턴스를 생성\n","embd = OpenAIEmbeddings(model=\"text-embedding-3-small\", disallowed_special=())\n","\n","cached_embeddings = CacheBackedEmbeddings.from_bytes_store(\n","    embd, store, namespace=embd.model\n",")"],"metadata":{"id":"olK6zDSagBzT","executionInfo":{"status":"ok","timestamp":1746250609663,"user_tz":-540,"elapsed":2007,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["from langchain_anthropic import ChatAnthropic\n","from langchain_openai import OpenAIEmbeddings, ChatOpenAI\n","from langchain.callbacks.base import BaseCallbackHandler\n","\n","class StreamCallback(BaseCallbackHandler):\n","    def on_llm_new_token(self, token: str, **kwargs):\n","        print(token, end=\"\", flush=True)\n","\n","# ChatOpenAI 모델 초기화\n","model = ChatOpenAI(\n","    model=\"gpt-4-turbo-preview\",\n","    temperature=0,\n","    streaming=True,\n","    callbacks=[StreamCallback()],\n",")\n","\n","# ChatAnthropic 모델을 초기화합니다. 온도는 0으로 설정하고, 모델은 \"claude-3-opus-20240229\"를 사용합니다.\n","# model = ChatAnthropic(temperature=0, model=\"claude-3-opus-20240229\")"],"metadata":{"id":"_zjrn1Esg2Jl","executionInfo":{"status":"ok","timestamp":1746250610303,"user_tz":-540,"elapsed":638,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["## 3. 트리 구축"],"metadata":{"id":"0YPmNI4ghEC-"}},{"cell_type":"code","source":["from typing import Dict, List, Optional, Tuple\n","\n","import numpy as np\n","import pandas as pd\n","import umap\n","from langchain.prompts import ChatPromptTemplate\n","from langchain_core.output_parsers import StrOutputParser\n","from sklearn.mixture import GaussianMixture\n","\n","RANDOM_SEED = 42  #고정된 시드 값\n","\n","def global_cluster_embeddings(\n","    embeddings: np.ndarray,\n","    dim: int,\n","    n_neighbors: Optional[int] = None,\n","    metric: str = \"cosine\",\n",") -> np.ndarray:\n","    \"\"\"\n","    UMAP을 사용하여 임베딩의 전역 차원 축소\n","\n","    매개변수:\n","    - embeddings: numpy 배열로 된 입력 임베딩\n","    - dim: 축소된 공간의 목표 차원\n","    - n_neighbors: 선택 사항; 각 점을 고려할 이웃의 수\n","                   제공되지 않으면 임베딩 수의 제곱근으로 기본 설정\n","    - metric: UMAP에 사용할 거리 측정 기\n","\n","    반환값:\n","    - 지정된 차원으로 축소된 임베딩의 numpy 배열\n","    \"\"\"\n","    if n_neighbors is None:\n","        n_neighbors = int((len(embeddings) - 1) ** 0.5)\n","    return umap.UMAP(\n","        n_neighbors=n_neighbors, n_components=dim, metric=metric\n","    ).fit_transform(embeddings)"],"metadata":{"id":"48qwkTnUhaWE","executionInfo":{"status":"ok","timestamp":1746250646961,"user_tz":-540,"elapsed":36655,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["def local_cluster_embeddings(\n","    embeddings: np.ndarray, dim: int, num_neighbors: int = 10, metric: str = \"cosine\"\n",") -> np.ndarray:\n","    \"\"\"\n","    임베딩에 대해 지역 차원 축소\n","    이는 일반적으로 전역 클러스터링 이후에 사용됨\n","\n","    매개변수:\n","    - embeddings: numpy 배열로서의 입력 임베딩\n","    - dim: 축소된 공간의 목표 차원 수\n","    - num_neighbors: 각 점에 대해 고려할 이웃의 수\n","    - metric: UMAP에 사용할 거리 측정 기준\n","\n","    반환값:\n","    - 지정된 차원으로 축소된 임베딩의 numpy 배열\n","    \"\"\"\n","    return umap.UMAP(\n","        n_neighbors=num_neighbors, n_components=dim, metric=metric\n","    ).fit_transform(embeddings)\n"],"metadata":{"id":"jf9B-myihyML","executionInfo":{"status":"ok","timestamp":1746250646964,"user_tz":-540,"elapsed":1,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["def get_optimal_clusters(\n","    embeddings: np.ndarray, max_clusters: int = 50, random_state: int = RANDOM_SEED\n",") -> int:\n","    \"\"\"\n","    가우시안 혼합 모델(Gaussian Mixture Model)을 사용하여\n","    베이지안 정보 기준(BIC)을 통해 최적의 클러스터 수를 결정\n","\n","    매개변수:\n","    - embeddings: numpy 배열로서의 입력 임베딩\n","    - max_clusters: 고려할 최대 클러스터 수\n","    - random_state: 재현성을 위한 시드\n","\n","    반환값:\n","    - 발견된 최적의 클러스터 수를 나타내는 정수\n","    \"\"\"\n","    max_clusters = min(\n","        max_clusters, len(embeddings)\n","    )  # 최대 클러스터 수와 임베딩의 길이 중 작은 값을 최대 클러스터 수로 설정\n","    n_clusters = np.arange(1, max_clusters)  # 1부터 최대 클러스터 수까지의 범위를 생성\n","    bics = []  # BIC 점수를 저장할 리스트\n","    for n in n_clusters:  # 각 클러스터 수에 대해 반복\n","        gm = GaussianMixture(\n","            n_components=n, random_state=random_state\n","        )  # 가우시안 혼합 모델 초기화\n","        gm.fit(embeddings)  # 임베딩에 대해 모델 학습\n","        bics.append(gm.bic(embeddings))  # 학습된 모델의 BIC 점수를 리스트에 추가\n","    return n_clusters[np.argmin(bics)]  # BIC 점수가 가장 낮은 클러스터 수를 반환\n"],"metadata":{"id":"3lOIc2OgiV0z","executionInfo":{"status":"ok","timestamp":1746250646966,"user_tz":-540,"elapsed":1,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["def GMM_cluster(embeddings: np.ndarray, threshold: float, random_state: int = 0):\n","    \"\"\"\n","    확률 임계값을 기반으로 가우시안 혼합 모델(GMM)을 사용하여\n","    임베딩을 클러스터링\n","\n","    매개변수:\n","    - embeddings: numpy 배열로서의 입력 임베딩\n","    - threshold: 임베딩을 클러스터에 할당하기 위한 확률 임계값\n","    - random_state: 재현성을 위한 시드\n","\n","    반환값:\n","    - 클러스터 레이블과 결정된 클러스터 수를 포함하는 튜\n","    \"\"\"\n","    n_clusters = get_optimal_clusters(embeddings)  # 최적의 클러스터 수 구하기\n","    # 가우시안 혼합 모델을 초기\n","    gm = GaussianMixture(n_components=n_clusters, random_state=random_state)\n","    gm.fit(embeddings)  # 임베딩에 대해 모델을 학습\n","    probs = gm.predict_proba(\n","        embeddings\n","    )  # 임베딩이 각 클러스터에 속할 확률을 예측\n","    # 임계값을 초과하는 확률을 가진 클러스터를 레이블로 선택\n","    labels = [np.where(prob > threshold)[0] for prob in probs]\n","    return labels, n_clusters  # 레이블과 클러스터 수를 반환"],"metadata":{"id":"2C51gx5siW8u","executionInfo":{"status":"ok","timestamp":1746250646968,"user_tz":-540,"elapsed":1,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["def perform_clustering(\n","    embeddings: np.ndarray,\n","    dim: int,\n","    threshold: float,\n",") -> List[np.ndarray]:\n","    \"\"\"\n","    임베딩에 대해 차원 축소, 가우시안 혼합 모델을 사용한 클러스터링,\n","    각 글로벌 클러스터 내에서의 로컬 클러스터링을 순서대로 수행\n","\n","    매개변수:\n","    - embeddings: numpy 배열로 된 입력 임\n","    - dim: UMAP 축소를 위한 목표 차원입니다.\n","    - threshold: GMM에서 임베딩을 클러스터에 할당하기 위한 확률 임계값\n","\n","    반환값:\n","    - 각 임베딩의 클러스터 ID를 포함하는 numpy 배열의 리스\n","    \"\"\"\n","    if len(embeddings) <= dim + 1:\n","        # 데이터가 충분하지 않을 때 클러스터링을 피함\n","        return [np.array([0]) for _ in range(len(embeddings))]\n","\n","    # 글로벌 차원 축소\n","    reduced_embeddings_global = global_cluster_embeddings(embeddings, dim)\n","    # 글로벌 클러스터링\n","    global_clusters, n_global_clusters = GMM_cluster(\n","        reduced_embeddings_global, threshold\n","    )\n","\n","    all_local_clusters = [np.array([]) for _ in range(len(embeddings))]\n","    total_clusters = 0\n","\n","    # 각 글로벌 클러스터를 순회하며 로컬 클러스터링 수행\n","    for i in range(n_global_clusters):\n","        # 현재 글로벌 클러스터에 속하는 임베딩 추출\n","        global_cluster_embeddings_ = embeddings[\n","            np.array([i in gc for gc in global_clusters])\n","        ]\n","\n","        if len(global_cluster_embeddings_) == 0:\n","            continue\n","        if len(global_cluster_embeddings_) <= dim + 1:\n","            # 작은 클러스터는 직접 할당으로 처리\n","            local_clusters = [np.array([0]) for _ in global_cluster_embeddings_]\n","            n_local_clusters = 1\n","        else:\n","            # 로컬 차원 축소 및 클러스터링\n","            reduced_embeddings_local = local_cluster_embeddings(\n","                global_cluster_embeddings_, dim\n","            )\n","            local_clusters, n_local_clusters = GMM_cluster(\n","                reduced_embeddings_local, threshold\n","            )\n","\n","        # 로컬 클러스터 ID 할당, 이미 처리된 총 클러스터 수를 조정\n","        for j in range(n_local_clusters):\n","            local_cluster_embeddings_ = global_cluster_embeddings_[\n","                np.array([j in lc for lc in local_clusters])\n","            ]\n","            indices = np.where(\n","                (embeddings == local_cluster_embeddings_[:, None]).all(-1)\n","            )[1]\n","            for idx in indices:\n","                all_local_clusters[idx] = np.append(\n","                    all_local_clusters[idx], j + total_clusters\n","                )\n","\n","        total_clusters += n_local_clusters\n","\n","    return all_local_clusters"],"metadata":{"id":"kg5Aq735iomJ","executionInfo":{"status":"ok","timestamp":1746250646970,"user_tz":-540,"elapsed":2,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["def embed(texts):\n","    # 텍스트 문서 목록에 대한 임베딩을 생성\n","    #\n","    # 이 함수는 `embd` 객체가 존재한다고 가정하며, 이 객체는 텍스트 목록을 받아\n","    # 그 임베딩을 반환하는 `embed_documents` 메소드를 가지고 있음\n","    #\n","    # 매개변수:\n","    # - texts: List[str], 임베딩할 텍스트 문서의 목록\n","    #\n","    # 반환값:\n","    # - numpy.ndarray: 주어진 텍스트 문서들에 대한 임베딩 배열\n","    text_embeddings = embd.embed_documents(\n","        texts\n","    )  # 텍스트 문서들의 임베딩을 생\n","    text_embeddings_np = np.array(text_embeddings)  # 임베딩을 numpy 배열로 변환\n","    return text_embeddings_np  # 임베딩된 numpy 배열을 반환"],"metadata":{"id":"d_dImt2ui13X","executionInfo":{"status":"ok","timestamp":1746250646971,"user_tz":-540,"elapsed":1,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["def embed_cluster_texts(texts):\n","    \"\"\"\n","    텍스트 목록을 임베딩하고 클러스터링하여, 텍스트, 그들의 임베딩,\n","    그리고 클러스터 라벨이 포함된 DataFrame을 반환\n","\n","    이 함수는 임베딩 생성과 클러스터링을 단일 단계로 결합합니다.\n","    임베딩에 대해 클러스터링을 수행하는 `perform_clustering` 함수의\n","    사전 정의된 존재를 가정\n","\n","    매개변수:\n","    - texts: List[str], 처리될 텍스트 문서의 목록\n","\n","    반환값:\n","    - pandas.DataFrame: 원본 텍스트, 그들의 임베딩,\n","      그리고 할당된 클러스터 라벨이 포함된 DataFrame\n","    \"\"\"\n","    text_embeddings_np = embed(texts)  # 임베딩 생성\n","    cluster_labels = perform_clustering(\n","        text_embeddings_np, 10, 0.1\n","    )  # 임베딩에 대해 클러스터링 수행\n","    df = pd.DataFrame()  # 결과를 저장할 DataFrame 초기화\n","    df[\"text\"] = texts  # 원본 텍스트 저장\n","    df[\"embd\"] = list(text_embeddings_np)  # DataFrame에 리스트로 임베딩 저장\n","    df[\"cluster\"] = cluster_labels  # 클러스터 라벨 저장\n","    return df"],"metadata":{"id":"elMnCRT-i___","executionInfo":{"status":"ok","timestamp":1746250646973,"user_tz":-540,"elapsed":1,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["def fmt_txt(df: pd.DataFrame) -> str:\n","    \"\"\"\n","    DataFrame에 있는 텍스트 문서를 단일 문자열로 포맷\n","\n","    매개변수:\n","    - df: 'text' 열에 포맷할 텍스트 문서가 포함된 DataFrame\n","\n","    반환값:\n","    - 모든 텍스트 문서가 특정 구분자로 결합된 단일 문자열\n","    \"\"\"\n","    unique_txt = df[\"text\"].tolist()  # 'text' 열의 모든 텍스트를 리스트로 변환\n","    return \"--- --- \\n --- --- \".join(\n","        unique_txt\n","    )  # 텍스트 문서들을 특정 구분자로 결합하여 반환"],"metadata":{"id":"QdVH5c6djLZw","executionInfo":{"status":"ok","timestamp":1746250646976,"user_tz":-540,"elapsed":2,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["def embed_cluster_summarize_texts(\n","    texts: List[str], level: int\n",") -> Tuple[pd.DataFrame, pd.DataFrame]:\n","    \"\"\"\n","    텍스트 목록에 대해 임베딩, 클러스터링 및 요약을 수행합니다.\n","    이 함수는 먼저 텍스트에 대한 임베딩을 생성하고,\n","    유사성을 기반으로 클러스터링을 수행한 다음, 클러스터 할당을 확장하여 처리를\n","    용이하게 하고 각 클러스터 내의 내용을 요약\n","\n","    매개변수:\n","    - texts: 처리할 텍스트 문서 목록\n","    - level: 처리의 깊이나 세부 사항을 정의할 수 있는 정수 매개변수\n","\n","    반환값:\n","    - 두 개의 데이터프레임을 포함하는 튜플:\n","      1. 첫 번째 데이터프레임(`df_clusters`)은 원본 텍스트, 그들의 임베딩,\n","         그리고 클러스터 할당을 포함합니다.\n","      2. 두 번째 데이터프레임(`df_summary`)은 각 클러스터에 대한 요약,\n","         지정된 세부 수준, 그리고 클러스터 식별자를 포함합니다.\n","    \"\"\"\n","\n","    # 텍스트를 임베딩하고 클러스터링하여 'text', 'embd', 'cluster' 열이 있는\n","    # 데이터프레임을 생성\n","    df_clusters = embed_cluster_texts(texts)\n","\n","    # 클러스터를 쉽게 조작하기 위해 데이터프레임을 확장할 준비\n","    expanded_list = []\n","\n","    # 데이터프레임 항목을 문서-클러스터 쌍으로 확장하여 처리를 간단하게\n","    for index, row in df_clusters.iterrows():\n","        for cluster in row[\"cluster\"]:\n","            expanded_list.append(\n","                {\"text\": row[\"text\"], \"embd\": row[\"embd\"], \"cluster\": cluster}\n","            )\n","\n","    # 확장된 목록에서 새 데이터프레임을 생성\n","    expanded_df = pd.DataFrame(expanded_list)\n","\n","    # 처리를 위해 고유한 클러스터 식별자를 검색\n","    all_clusters = expanded_df[\"cluster\"].unique()\n","\n","    print(f\"--Generated {len(all_clusters)} clusters--\")\n","\n","    # 요약\n","    template = \"\"\"여기 LangChain 표현 언어 문서의 하위 집합이 있습니다.\n","\n","    LangChain 표현 언어는 LangChain에서 체인을 구성하는 방법을 제공합니다.\n","\n","    제공된 문서의 자세한 요약을 제공하십시오.\n","\n","    문서:\n","    {context}\n","    \"\"\"\n","    prompt = ChatPromptTemplate.from_template(template)\n","    chain = prompt | model | StrOutputParser()\n","\n","    # 각 클러스터 내의 텍스트를 요약을 위해 포맷\n","    summaries = []\n","    for i in all_clusters:\n","        df_cluster = expanded_df[expanded_df[\"cluster\"] == i]\n","        formatted_txt = fmt_txt(df_cluster)\n","        summaries.append(chain.invoke({\"context\": formatted_txt}))\n","\n","    # 요약, 해당 클러스터 및 레벨을 저장할 데이터프레임을 생성\n","    df_summary = pd.DataFrame(\n","        {\n","            \"summaries\": summaries,\n","            \"level\": [level] * len(summaries),\n","            \"cluster\": list(all_clusters),\n","        }\n","    )\n","\n","    return df_clusters, df_summary"],"metadata":{"id":"KSFHLZs9jQCB","executionInfo":{"status":"ok","timestamp":1746250646983,"user_tz":-540,"elapsed":7,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["def recursive_embed_cluster_summarize(\n","    texts: List[str], level: int = 1, n_levels: int = 3\n",") -> Dict[int, Tuple[pd.DataFrame, pd.DataFrame]]:\n","    \"\"\"\n","    지정된 레벨까지 또는 고유 클러스터의 수가 1이 될 때까지 텍스트를\n","    재귀적으로 임베딩, 클러스터링, 요약하여\n","    각 레벨에서의 결과를 저장\n","\n","    매개변수:\n","    - texts: List[str], 처리할 텍스트들\n","    - level: int, 현재 재귀 레벨 (1에서 시작)\n","    - n_levels: int, 재귀의 최대 깊이\n","\n","    반환값:\n","    - Dict[int, Tuple[pd.DataFrame, pd.DataFrame]],\n","\t    재귀 레벨을 키로 하고 해당 레벨에서의 클러스터 DataFrame과\n","\t    요약 DataFrame을 포함하는 튜플을 값으로 하는 사전\n","    \"\"\"\n","    results = {}  # 각 레벨에서의 결과를 저장할 사전\n","\n","    # 현재 레벨에 대해 임베딩, 클러스터링, 요약 수행\n","    df_clusters, df_summary = embed_cluster_summarize_texts(texts, level)\n","\n","    # 현재 레벨의 결과 저장\n","    results[level] = (df_clusters, df_summary)\n","\n","    # 추가 재귀가 가능하고 의미가 있는지 결정\n","    unique_clusters = df_summary[\"cluster\"].nunique()\n","    if level < n_levels and unique_clusters > 1:\n","        # 다음 레벨의 재귀 입력 텍스트로 요약 사용\n","        new_texts = df_summary[\"summaries\"].tolist()\n","        next_level_results = recursive_embed_cluster_summarize(\n","            new_texts, level + 1, n_levels\n","        )\n","\n","        # 다음 레벨의 결과를 현재 결과 사전에 병합\n","        results.update(next_level_results)\n","\n","    return results"],"metadata":{"id":"VYw9L6JGjfR2","executionInfo":{"status":"ok","timestamp":1746250646993,"user_tz":-540,"elapsed":9,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# 전체 문서의 개수\n","len(docs_texts)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vTsVhz3zjpoU","executionInfo":{"status":"ok","timestamp":1746250647066,"user_tz":-540,"elapsed":66,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}},"outputId":"274051b6-ac95-44fb-cf60-1c80f530139d"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["# 트리 구축\n","leaf_texts = docs_texts  # 문서 텍스트를 리프 텍스트로 설정\n","results = recursive_embed_cluster_summarize(\n","    leaf_texts, level=1, n_levels=3\n",")  # 재귀적으로 임베딩, 클러스터링 및 요약을 수행하여 결과를 얻음"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wD-kH1T4jrYz","executionInfo":{"status":"ok","timestamp":1746250681151,"user_tz":-540,"elapsed":34087,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}},"outputId":"de78acf4-6930-400f-e5c4-12b1d00f5cfa"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["--Generated 1 clusters--\n","LangChain Expression Language (LCEL)는 LangChain에서 새로운 Runnable을 기존의 Runnable에서 구성하는 방법을 선언적으로 접근하는 언어입니다. 이는 \"어떻게\"가 아닌 \"무엇을\" 해야 하는지를 기술함으로써 LangChain이 체인의 실행 시간을 최적화할 수 있게 합니다. LCEL을 사용하여 생성된 Runnable을 \"체인\"이라고 하며, 이는 전체 Runnable 인터페이스를 구현합니다.\n","\n","LCEL의 주요 이점은 다음과 같습니다:\n","- 최적화된 병렬 실행: RunnableParallel을 사용하여 Runnable을 병렬로 실행하거나 Runnable Batch API를 사용하여 주어진 체인을 통해 여러 입력을 병렬로 실행할 수 있습니다. 병렬 실행은 처리를 순차적이 아닌 병렬로 수행할 수 있기 때문에 대기 시간을 크게 줄일 수 있습니다.\n","- 보장된 비동기 지원: LCEL로 구축된 모든 체인은 Runnable Async API를 사용하여 비동기적으로 실행할 수 있습니다. 이는 대량의 요청을 동시에 처리하고자 하는 서버 환경에서 유용할 수 있습니다.\n","- 스트리밍 간소화: LCEL 체인은 스트리밍될 수 있으며, 체인이 실행됨에 따라 점진적인 출력을 허용합니다. LangChain은 첫 번째 토큰의 시간까지의 시간을 최소화하기 위해 출력의 스트리밍을 최적화할 수 있습니다.\n","\n","LCEL은 오케스트레이션 솔루션으로, LangChain이 체인의 실행 시간을 최적화된 방식으로 처리할 수 있게 합니다. 복잡한 상태 관리, 분기, 순환 또는 다중 에이전트가 필요한 애플리케이션의 경우, 사용자가 LangGraph를 활용하는 것이 좋습니다. LangGraph에서는 애플리케이션의 흐름을 지정하는 그래프를 정의합니다. 이를 통해 사용자는 LCEL이 필요한 개별 노드 내에서 LCEL을 계속 사용하면서도 복잡한 오케스트레이션 로직을 보다 읽기 쉽고 유지 관리하기 쉬운 방식으로 정의할 수 있습니다.\n","\n","LCEL 체인은 기존 Runnable을 함께 구성하여 구축됩니다. 주요 구성 원시체는 RunnableSequence와 RunnableParallel입니다. 다른 많은 구성 원시체(예: RunnableAssign)는 이 두 원시체의 변형으로 생각할 수 있습니다.\n","\n","RunnableSequence는 여러 runnable을 순차적으로 \"연결\"하여, 하나의 runnable의 출력이 다음 runnable의 입력으로 사용되도록 하는 구성 원시체입니다. 반면, RunnableParallel은 동일한 입력을 각각에 제공하여 여러 runnable을 동시에 실행할 수 있게 하는 구성 원시체입니다.\n","\n","LCEL은 자동 유형 강제 변환을 적용하여 체인을 구성하기 쉽게 합니다. 예를 들어, 함수는 RunnableLambda로 자동 변환되고, 사전은 RunnableParallel로 자동 변환됩니다.\n","\n","LCEL은 LLMChain과 ConversationalRetrievalChain과 같은 기존의 하위 클래스 체인에 대한 일관된 동작과 사용자 정의를 제공하려고 합니다. 많은 기존 체인은 프롬프트와 같은 중요한 세부 사항을 숨기며, 다양한 모델이 등장함에 따라 사용자 정의가 점점 더 중요해지고 있습니다. 현재 이러한 기존 체인을 사용하는 경우, 마이그레이션 방법에 대한 안내를 참조하십시오."]}]},{"cell_type":"code","source":["from langchain_community.vectorstores import FAISS\n","\n","# leaf_texts를 복사하여 all_texts를 초기화\n","all_texts = leaf_texts.copy()\n","\n","# 각 레벨의 요약을 추출하여 all_texts에 추가하기 위해 결과를 순회\n","for level in sorted(results.keys()):\n","    # 현재 레벨의 DataFrame에서 요약을 추출\n","    summaries = results[level][1][\"summaries\"].tolist()\n","    # 현재 레벨의 요약을 all_texts에 추\n","    all_texts.extend(summaries)\n","\n","# 이제 all_texts를 사용하여 FAISS vectorstore를 구축\n","vectorstore = FAISS.from_texts(texts=all_texts, embedding=embd)"],"metadata":{"id":"O2BYYuGojzYr","executionInfo":{"status":"ok","timestamp":1746250682185,"user_tz":-540,"elapsed":1030,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["import os\n","\n","DB_INDEX = \"RAPTOR\"\n","\n","# 로컬에 FAISS DB 인덱스가 이미 존재하는지 확인하고,\n","# 그렇다면 로드하여 vectorstore와 병합한 후 저장\n","if os.path.exists(DB_INDEX):\n","    local_index = FAISS.load_local(DB_INDEX, embd)\n","    local_index.merge_from(vectorstore)\n","    local_index.save_local(DB_INDEX)\n","else:\n","    vectorstore.save_local(folder_path=DB_INDEX)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"TCMTLxhLj9vc","executionInfo":{"status":"error","timestamp":1746250682234,"user_tz":-540,"elapsed":47,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}},"outputId":"ba3c8e6b-5ff4-4e4d-8e55-41efaccb6759"},"execution_count":21,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"The de-serialization relies loading a pickle file. Pickle files can be modified to deliver a malicious payload that results in execution of arbitrary code on your machine.You will need to set `allow_dangerous_deserialization` to `True` to enable deserialization. If you do this, make sure that you trust the source of the data. For example, if you are loading a file that you created, and know that no one else has modified the file, then this is safe to do. Do not set this to `True` if you are loading a file from an untrusted source (e.g., some random site on the internet.).","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-4c7ec41bb954>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# 그렇다면 로드하여 vectorstore와 병합한 후 저장\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mDB_INDEX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m     \u001b[0mlocal_index\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mFAISS\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_local\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mDB_INDEX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0membd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m     \u001b[0mlocal_index\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge_from\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvectorstore\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mlocal_index\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave_local\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mDB_INDEX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/langchain_community/vectorstores/faiss.py\u001b[0m in \u001b[0;36mload_local\u001b[0;34m(cls, folder_path, embeddings, index_name, allow_dangerous_deserialization, **kwargs)\u001b[0m\n\u001b[1;32m   1188\u001b[0m         \"\"\"\n\u001b[1;32m   1189\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mallow_dangerous_deserialization\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1190\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m   1191\u001b[0m                 \u001b[0;34m\"The de-serialization relies loading a pickle file. \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1192\u001b[0m                 \u001b[0;34m\"Pickle files can be modified to deliver a malicious payload that \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: The de-serialization relies loading a pickle file. Pickle files can be modified to deliver a malicious payload that results in execution of arbitrary code on your machine.You will need to set `allow_dangerous_deserialization` to `True` to enable deserialization. If you do this, make sure that you trust the source of the data. For example, if you are loading a file that you created, and know that no one else has modified the file, then this is safe to do. Do not set this to `True` if you are loading a file from an untrusted source (e.g., some random site on the internet.)."]}]},{"cell_type":"code","source":["# retriever 생성\n","retriever = vectorstore.as_retriever()"],"metadata":{"id":"HTPlyDqkkGoq","executionInfo":{"status":"aborted","timestamp":1746250682300,"user_tz":-540,"elapsed":116251,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from langchain import hub\n","from langchain_core.runnables import RunnablePassthrough\n","\n","# 프롬프트 생성\n","prompt = hub.pull(\"rlm/rag-prompt\")\n","\n","# 문서 포스트 프로세싱\n","\n","\n","def format_docs(docs):\n","    # 문서의 페이지 내용을 이어붙여 반환합니다.\n","    return \"\\n\\n\".join(doc.page_content for doc in docs)\n","\n","\n","# RAG 체인 정의\n","rag_chain = (\n","    # 검색 결과를 포맷팅하고 질문을 처리합니다.\n","    {\"context\": retriever | format_docs, \"question\": RunnablePassthrough()}\n","    | prompt  # 프롬프트를 적용합니다.\n","    | model  # 모델을 적용합니다.\n","    | StrOutputParser()  # 문자열 출력 파서를 적용합니다.\n",")"],"metadata":{"id":"IFTArGntkI31","executionInfo":{"status":"aborted","timestamp":1746250682302,"user_tz":-540,"elapsed":116252,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from langchain import hub\n","from langchain_core.runnables import RunnablePassthrough\n","\n","# 프롬프트 생성\n","prompt = hub.pull(\"rlm/rag-prompt\")\n","\n","# 문서 포스트 프로세싱\n","def format_docs(docs):\n","    # 문서의 페이지 내용을 이어붙여 반환\n","    return \"\\n\\n\".join(doc.page_content for doc in docs)\n","\n","\n","# RAG 체인 정의\n","rag_chain = (\n","    # 검색 결과를 포맷팅하고 질문을 처리\n","    {\"context\": retriever | format_docs, \"question\": RunnablePassthrough()}\n","    | prompt  # 프롬프트 적용\n","    | model  # 모델 적용\n","    | StrOutputParser()  # 문자열 출력 파서 적용\n",")"],"metadata":{"id":"sUnH-WsdkLDL","executionInfo":{"status":"aborted","timestamp":1746250682304,"user_tz":-540,"elapsed":116253,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 추상적인 질문 실행\n","_ = rag_chain.invoke(\"전체 문서의 핵심 주제에 대해 설명해주세요.\")"],"metadata":{"id":"PsW78_xnkTtW","executionInfo":{"status":"aborted","timestamp":1746250682306,"user_tz":-540,"elapsed":116254,"user":{"displayName":"김현주/컴퓨터공학부","userId":"13373004077348590592"}}},"execution_count":null,"outputs":[]}]}